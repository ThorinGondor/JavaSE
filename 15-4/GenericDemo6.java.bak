/**
     泛型：用于解决安全问题，假设我们输入了不同类型的内容，(比如String类和int类等)。
	       
		   好处：1.将运行时期出现的问题转移到了编译过程中，让运行时问题减少。
		         2.避免了强制转换的麻烦。
		   
		   泛型的格式：通过<XXX>来定义、限制要操作的引用数据类型。

		   通常在集合框架Collection中很常见，只要见到尖括号，就要定义泛型。
		   当使用集合时，就是要将集合中要存储的数据类型作为参数传递到<>即可。
**/
/***
     什么时候用泛型类？当类中要操作的引用数据类型不确定的时候，早期定义Object来完成扩展，现在定义泛型类来扩展<XXX>
	 
	 这种方案是在用泛型定义 类。
***/
/***
      泛型类所定义的泛型，在整个类有效，如果被方法使用，那么泛型类建立的对象明确要操作的类型后，那么对于此对象便不能操作别的数据类型。

	  为了让不同方法可以操作不同类型，且类型还不确定。
	  那么可将泛型定义在方法上。
	  还可以将泛型定义在接口上。见Demo4和5，4可以操作很多不同数据，5限定某种数据类型
***/
/***
      本题需求；创建两个ArrayList，一个是String数据类型限定，一个是Integer数据类型限定，并各自添加元素，通过复用一个函数来打印。
	  该复用函数应使用泛型限定。
***/

import java.util.*;

class GenericDemo6 
{
	public static void main(String[] args) 
	{
		ArrayList<String> AL0 = new ArrayList<String>();
		ArrayList<Integer> AL1 = new ArrayList<Integer>();
		
		AL0.add("abc");
		AL0.add("def");
		AL0.add("ghi");
		AL1.add(9);
		AL1.add(78);
		AL1.add(36);

		Print(AL0);
		Print(AL1);
	}
/*********法一：
	public static void Print(ArrayList<?> AL)
	{
		Iterator<?> it = AL.iterator();
		while(it.hasNext())
	    {
			System.out.println(it.next());
		}
	}

/***********法二：*/
    public static <E> void Print(ArrayList<E> AL)
    {
		Iterator<E> it = AL.iterator();
		while(it.hasNext())
		{
			E e = it.next();
			System.out.println(e);
		}
	}
}
