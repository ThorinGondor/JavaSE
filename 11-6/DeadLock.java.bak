/*
  死锁：
  同步中嵌套同步。
*/
class Win implements Runnable
{
	private int num = 3000;
	Object obj = new Object();
	public synchronized void run()
	{
		while(true)
		{
				synchronized(obj)   //该函数作用是保证它所包含的下述代码只能由一个线程来执行，下一个线程在这个线程执行完之前进不来
			    {
					if(num>=0)
					{
						try{Thread.sleep(5);}catch(Exception e){}
						System.out.println(Thread.currentThread().getName()+"--Sale--"+num--);
					}
				}
		}
	}
}
class DeadLock
{
	public static void main(String[] args)
	{
		
		Win T = new Win();
		Thread T0 = new Thread(T);  //Thread([Runnable] target) 分配新的Thread对象
		Thread T1 = new Thread(T);
		Thread T2 = new Thread(T);
		Thread T3 = new Thread(T);
		
		T0.start();
		T1.start();
		T2.start();
		T3.start();
	}
}